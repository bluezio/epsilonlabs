model Core driver EMF {nsuri = "org.amma.dsl.jdt.core"};
model DOM driver EMF {nsuri = "org.amma.dsl.jdt.dom"};
model PrimitiveTypes driver EMF {nsuri = "org.amma.dsl.jdt.primitiveTypes"};
var size = 0;
var javadoc = Javadoc.all.first;
size = size + Javadoc.all.tags.size();
size = size + Javadoc.all.size();
var block = Block.all.first;
size = size + Block.all.statements.size();
size = size + Block.all.size();
var modifier = Modifier.all.first;
size = size + Modifier.all.abstract.size();
size = size + Modifier.all.final.size();
size = size + Modifier.all.native.size();
size = size + Modifier.all.none.size();
size = size + Modifier.all.private.size();
size = size + Modifier.all.protected.size();
size = size + Modifier.all.public.size();
size = size + Modifier.all.static.size();
size = size + Modifier.all.strictfp.size();
size = size + Modifier.all.synchronized.size();
size = size + Modifier.all.transient.size();
size = size + Modifier.all.volatile.size();
size = size + Modifier.all.size();
var textElement = TextElement.all.first;
size = size + TextElement.all.text.size();
size = size + TextElement.all.size();
var methodInvocation = MethodInvocation.all.first;
size = size + MethodInvocation.all.arguments.size();
size = size + MethodInvocation.all.expression.size();
size = size + MethodInvocation.all.name.size();
size = size + MethodInvocation.all.typeArguments.size();
size = size + MethodInvocation.all.methodBinding.size();
size = size + MethodInvocation.all.size();
size = size + IMethod.all.size();
var iImportDeclaration = IImportDeclaration.all.first;
size = size + IImportDeclaration.all.isOnDemand.size();
size = size + IImportDeclaration.all.isStatic.size();
size = size + IImportDeclaration.all.size();
var qualifiedName = QualifiedName.all.first;
size = size + QualifiedName.all.name.size();
size = size + QualifiedName.all.qualifier.size();
size = size + QualifiedName.all.size();
var iClassFile = IClassFile.all.first;
size = size + IClassFile.all.isClass.size();
size = size + IClassFile.all.isInterface.size();
size = size + IClassFile.all.type.size();
size = size + IClassFile.all.size();
var tagElement = TagElement.all.first;
size = size + TagElement.all.fragments.size();
size = size + TagElement.all.tagName.size();
size = size + TagElement.all.nested.size();
size = size + TagElement.all.size();
var methodDeclaration = MethodDeclaration.all.first;
size = size + MethodDeclaration.all.body.size();
size = size + MethodDeclaration.all.extraDimensions.size();
size = size + MethodDeclaration.all.name.size();
size = size + MethodDeclaration.all.returnType.size();
size = size + MethodDeclaration.all.constructor.size();
size = size + MethodDeclaration.all.varargs.size();
size = size + MethodDeclaration.all.parameters.size();
size = size + MethodDeclaration.all.thrownExceptions.size();
size = size + MethodDeclaration.all.typeParameters.size();
size = size + MethodDeclaration.all.binding.size();
size = size + MethodDeclaration.all.size();
size = size + IMethod.all.size();
var importDeclaration = ImportDeclaration.all.first;
size = size + ImportDeclaration.all.onDemand.size();
size = size + ImportDeclaration.all.static.size();
size = size + ImportDeclaration.all.name.size();
size = size + ImportDeclaration.all.size();
var singleVariableDeclaration = SingleVariableDeclaration.all.first;
size = size + SingleVariableDeclaration.all.type.size();
size = size + SingleVariableDeclaration.all.varargs.size();
size = size + SingleVariableDeclaration.all.modifiers.size();
size = size + SingleVariableDeclaration.all.size();
var simpleName = SimpleName.all.first;
size = size + SimpleName.all.identifier.size();
size = size + SimpleName.all.declaration.size();
size = size + SimpleName.all.size();
var simpleType = SimpleType.all.first;
size = size + SimpleType.all.name.size();
size = size + SimpleType.all.size();
var parameter = Parameter.all.first;
size = size + Parameter.all.name.size();
size = size + Parameter.all.type.size();
size = size + Parameter.all.size();
size.println();
