model Core driver EMF {nsuri = "org.amma.dsl.jdt.core"};
model DOM driver EMF {nsuri = "org.amma.dsl.jdt.dom"};
model PrimitiveTypes driver EMF {nsuri = "org.amma.dsl.jdt.primitiveTypes"};

var characterLiteral = CharacterLiteral.all.first;
var javadoc = Javadoc.all.first;
var variableDeclarationExpression = VariableDeclarationExpression.all.first;
var superConstructorInvocation = SuperConstructorInvocation.all.first;
var iType = IType.all.first;
var compilationUnit = CompilationUnit.all.first;
var throwStatement = ThrowStatement.all.first;
var continueStatement = ContinueStatement.all.first;
var packageDeclaration = PackageDeclaration.all.first;
var classInstanceCreation = ClassInstanceCreation.all.first;
var switchStatement = SwitchStatement.all.first;
var arrayCreation = ArrayCreation.all.first;
var initializer = Initializer.all.first;
var simpleType = SimpleType.all.first;
var iField = IField.all.first;
var catchClause = CatchClause.all.first;
var arrayInitializer = ArrayInitializer.all.first;
var parenthesizedExpression = ParenthesizedExpression.all.first;
var numberLiteral = NumberLiteral.all.first;
var breakStatement = BreakStatement.all.first;
var iInitializer = IInitializer.all.first;
var methodRefParameter = MethodRefParameter.all.first;
var parameterizedType = ParameterizedType.all.first;
var iClassFile = IClassFile.all.first;
var arrayType = ArrayType.all.first;
var anonymousClassDeclaration = AnonymousClassDeclaration.all.first;
var iJavaModel = IJavaModel.all.first;
var returnStatement = ReturnStatement.all.first;
var thisExpression = ThisExpression.all.first;
var iImportDeclaration = IImportDeclaration.all.first;
var superMethodInvocation = SuperMethodInvocation.all.first;
var binaryPackageFragmentRoot = BinaryPackageFragmentRoot.all.first;
var stringLiteral = StringLiteral.all.first;
var markerAnnotation = MarkerAnnotation.all.first;
var block = Block.all.first;
var simpleName = SimpleName.all.first;
var switchCase = SwitchCase.all.first;
var iJavaProject = IJavaProject.all.first;
var conditionalExpression = ConditionalExpression.all.first;
var iCompilationUnit = ICompilationUnit.all.first;
var enhancedForStatement = EnhancedForStatement.all.first;
var typeLiteral = TypeLiteral.all.first;
var whileStatement = WhileStatement.all.first;
var sourcePackageFragmentRoot = SourcePackageFragmentRoot.all.first;
var tagElement = TagElement.all.first;
