model Core driver EMF {nsuri = "org.amma.dsl.jdt.core"};
model DOM driver EMF {nsuri = "org.amma.dsl.jdt.dom"};
model PrimitiveTypes driver EMF {nsuri = "org.amma.dsl.jdt.primitiveTypes"};

var switchCase = SwitchCase.all.first;
var throwStatement = ThrowStatement.all.first;
var memberRef = MemberRef.all.first;
var enumDeclaration = EnumDeclaration.all.first;
var switchStatement = SwitchStatement.all.first;
var conditionalExpression = ConditionalExpression.all.first;
var arrayInitializer = ArrayInitializer.all.first;
var typeParameter = TypeParameter.all.first;
var iJavaModel = IJavaModel.all.first;
var labeledStatement = LabeledStatement.all.first;
var methodDeclaration = MethodDeclaration.all.first;
var arrayType = ArrayType.all.first;
var breakStatement = BreakStatement.all.first;
var sourcePackageFragmentRoot = SourcePackageFragmentRoot.all.first;
var enhancedForStatement = EnhancedForStatement.all.first;
var thisExpression = ThisExpression.all.first;
var typeDeclarationStatement = TypeDeclarationStatement.all.first;
var textElement = TextElement.all.first;
var singleMemberAnnotation = SingleMemberAnnotation.all.first;
var methodRefParameter = MethodRefParameter.all.first;
var prefixExpression = PrefixExpression.all.first;
var iInitializer = IInitializer.all.first;
var enumConstantDeclaration = EnumConstantDeclaration.all.first;
var superConstructorInvocation = SuperConstructorInvocation.all.first;
var javadoc = Javadoc.all.first;
var qualifiedName = QualifiedName.all.first;
var synchronizedStatement = SynchronizedStatement.all.first;
var iField = IField.all.first;
var assignment = Assignment.all.first;
var singleVariableDeclaration = SingleVariableDeclaration.all.first;
var instanceofExpression = InstanceofExpression.all.first;
var block = Block.all.first;
var iClassFile = IClassFile.all.first;
var parameter = Parameter.all.first;
var returnStatement = ReturnStatement.all.first;
var parameterizedType = ParameterizedType.all.first;
var tryStatement = TryStatement.all.first;
var typeLiteral = TypeLiteral.all.first;
var castExpression = CastExpression.all.first;
var compilationUnit = CompilationUnit.all.first;
var binaryPackageFragmentRoot = BinaryPackageFragmentRoot.all.first;
var wildcardType = WildcardType.all.first;
var iImportDeclaration = IImportDeclaration.all.first;
var ifStatement = IfStatement.all.first;
var anonymousClassDeclaration = AnonymousClassDeclaration.all.first;
var iJavaProject = IJavaProject.all.first;
var parenthesizedExpression = ParenthesizedExpression.all.first;
var assertStatement = AssertStatement.all.first;