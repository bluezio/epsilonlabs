model Core driver EMF {nsuri = "org.amma.dsl.jdt.core"};
model DOM driver EMF {nsuri = "org.amma.dsl.jdt.dom"};
model PrimitiveTypes driver EMF {nsuri = "org.amma.dsl.jdt.primitiveTypes"};

var arrayInitializer = ArrayInitializer.all.first;
var primitiveType = PrimitiveType.all.first;
var block = Block.all.first;
var singleMemberAnnotation = SingleMemberAnnotation.all.first;
var characterLiteral = CharacterLiteral.all.first;
var anonymousClassDeclaration = AnonymousClassDeclaration.all.first;
var iJavaProject = IJavaProject.all.first;
var methodInvocation = MethodInvocation.all.first;
var methodDeclaration = MethodDeclaration.all.first;
var variableDeclarationExpression = VariableDeclarationExpression.all.first;
var breakStatement = BreakStatement.all.first;
var thisExpression = ThisExpression.all.first;
var continueStatement = ContinueStatement.all.first;
var superConstructorInvocation = SuperConstructorInvocation.all.first;
var typeLiteral = TypeLiteral.all.first;
var iField = IField.all.first;
var methodRef = MethodRef.all.first;
var arrayAccess = ArrayAccess.all.first;
var parenthesizedExpression = ParenthesizedExpression.all.first;
var initializer = Initializer.all.first;
var markerAnnotation = MarkerAnnotation.all.first;
var compilationUnit = CompilationUnit.all.first;
var whileStatement = WhileStatement.all.first;
var iMethod = IMethod.all.first;
var booleanLiteral = BooleanLiteral.all.first;
var infixExpression = InfixExpression.all.first;
var catchClause = CatchClause.all.first;
var variableDeclarationFragment = VariableDeclarationFragment.all.first;
var returnStatement = ReturnStatement.all.first;
var synchronizedStatement = SynchronizedStatement.all.first;
var arrayCreation = ArrayCreation.all.first;
var switchCase = SwitchCase.all.first;
var parameter = Parameter.all.first;
var stringLiteral = StringLiteral.all.first;
var iInitializer = IInitializer.all.first;
var tryStatement = TryStatement.all.first;
var simpleName = SimpleName.all.first;
var arrayType = ArrayType.all.first;
var iImportDeclaration = IImportDeclaration.all.first;
var javadoc = Javadoc.all.first;
var assignment = Assignment.all.first;
var iType = IType.all.first;
var packageDeclaration = PackageDeclaration.all.first;
var binaryPackageFragmentRoot = BinaryPackageFragmentRoot.all.first;
var singleVariableDeclaration = SingleVariableDeclaration.all.first;
var enhancedForStatement = EnhancedForStatement.all.first;
var tagElement = TagElement.all.first;
var textElement = TextElement.all.first;
var switchStatement = SwitchStatement.all.first;
var sourcePackageFragmentRoot = SourcePackageFragmentRoot.all.first;
var variableDeclarationStatement = VariableDeclarationStatement.all.first;
var fieldAccess = FieldAccess.all.first;
var castExpression = CastExpression.all.first;
var forStatement = ForStatement.all.first;
var conditionalExpression = ConditionalExpression.all.first;
var instanceofExpression = InstanceofExpression.all.first;
var nullLiteral = NullLiteral.all.first;
var importDeclaration = ImportDeclaration.all.first;
var modifier = Modifier.all.first;
var fieldDeclaration = FieldDeclaration.all.first;
var expressionStatement = ExpressionStatement.all.first;
var postfixExpression = PostfixExpression.all.first;
var ifStatement = IfStatement.all.first;
var methodRefParameter = MethodRefParameter.all.first;
var iCompilationUnit = ICompilationUnit.all.first;
var iJavaModel = IJavaModel.all.first;
