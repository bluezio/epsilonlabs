model Core driver EMF {nsuri = "org.amma.dsl.jdt.core"};
model DOM driver EMF {nsuri = "org.amma.dsl.jdt.dom"};
model PrimitiveTypes driver EMF {nsuri = "org.amma.dsl.jdt.primitiveTypes"};

var markerAnnotation = MarkerAnnotation.all.first;
var anonymousClassDeclaration = AnonymousClassDeclaration.all.first;
var iPackageFragment = IPackageFragment.all.first;
var catchClause = CatchClause.all.first;
var block = Block.all.first;
var wildcardType = WildcardType.all.first;
var enumDeclaration = EnumDeclaration.all.first;
var enumConstantDeclaration = EnumConstantDeclaration.all.first;
var methodDeclaration = MethodDeclaration.all.first;
var assertStatement = AssertStatement.all.first;
var forStatement = ForStatement.all.first;
var typeDeclarationStatement = TypeDeclarationStatement.all.first;
var iCompilationUnit = ICompilationUnit.all.first;
var modifier = Modifier.all.first;
var doStatement = DoStatement.all.first;
var arrayCreation = ArrayCreation.all.first;
var tryStatement = TryStatement.all.first;
var castExpression = CastExpression.all.first;
var constructorInvocation = ConstructorInvocation.all.first;
var continueStatement = ContinueStatement.all.first;
var fieldAccess = FieldAccess.all.first;
var iJavaProject = IJavaProject.all.first;
var iMethod = IMethod.all.first;
var singleVariableDeclaration = SingleVariableDeclaration.all.first;
var thisExpression = ThisExpression.all.first;
var expressionStatement = ExpressionStatement.all.first;
var classInstanceCreation = ClassInstanceCreation.all.first;
var binaryPackageFragmentRoot = BinaryPackageFragmentRoot.all.first;
var compilationUnit = CompilationUnit.all.first;
var methodRef = MethodRef.all.first;
var throwStatement = ThrowStatement.all.first;
var synchronizedStatement = SynchronizedStatement.all.first;
var iJavaModel = IJavaModel.all.first;
var sourcePackageFragmentRoot = SourcePackageFragmentRoot.all.first;
var packageDeclaration = PackageDeclaration.all.first;
var labeledStatement = LabeledStatement.all.first;
var superConstructorInvocation = SuperConstructorInvocation.all.first;