model Core driver EMF {nsuri = "org.amma.dsl.jdt.core"};
model DOM driver EMF {nsuri = "org.amma.dsl.jdt.dom"};
model PrimitiveTypes driver EMF {nsuri = "org.amma.dsl.jdt.primitiveTypes"};

var returnStatement = ReturnStatement.all.first().println();
var wildcardType = WildcardType.all.first();
var methodDeclaration = MethodDeclaration.all.first();
var enumDeclaration = EnumDeclaration.all.first();
var arrayCreation = ArrayCreation.all.first();
var assignment = Assignment.all.first();
var instanceofExpression = InstanceofExpression.all.first();
var emptyStatement = EmptyStatement.all.first();
var fieldDeclaration = FieldDeclaration.all.first();
var infixExpression = InfixExpression.all.first();
var methodRefParameter = MethodRefParameter.all.first();
var variableDeclarationStatement = VariableDeclarationStatement.all.first();
var qualifiedName = QualifiedName.all.first();
var parenthesizedExpression = ParenthesizedExpression.all.first();
var catchClause = CatchClause.all.first();
var arrayType = ArrayType.all.first();
var iPackageFragment = IPackageFragment.all.first();
var classInstanceCreation = ClassInstanceCreation.all.first();
var breakStatement = BreakStatement.all.first();
var anonymousClassDeclaration = AnonymousClassDeclaration.all.first();
var primitiveType = PrimitiveType.all.first();
var iMethod = IMethod.all.first();
var ifStatement = IfStatement.all.first();
var importDeclaration = ImportDeclaration.all.first();
var memberRef = MemberRef.all.first();
var switchCase = SwitchCase.all.first();
var conditionalExpression = ConditionalExpression.all.first();
var thisExpression = ThisExpression.all.first();
var nullLiteral = NullLiteral.all.first();
var sourcePackageFragmentRoot = SourcePackageFragmentRoot.all.first();
var typeDeclaration = TypeDeclaration.all.first();
var parameter = Parameter.all.first();
var forStatement = ForStatement.all.first();
var tagElement = TagElement.all.first();
var arrayAccess = ArrayAccess.all.first();
var enumConstantDeclaration = EnumConstantDeclaration.all.first();
var booleanLiteral = BooleanLiteral.all.first();
var simpleType = SimpleType.all.first();
var characterLiteral = CharacterLiteral.all.first();
var packageDeclaration = PackageDeclaration.all.first();
var postfixExpression = PostfixExpression.all.first();
var iImportDeclaration = IImportDeclaration.all.first();
var parameterizedType = ParameterizedType.all.first();
var iInitializer = IInitializer.all.first();
var superConstructorInvocation = SuperConstructorInvocation.all.first();
var iType = IType.all.first();
var variableDeclarationFragment = VariableDeclarationFragment.all.first();
var prefixExpression = PrefixExpression.all.first();
var binaryPackageFragmentRoot = BinaryPackageFragmentRoot.all.first();
var assertStatement = AssertStatement.all.first();
var superMethodInvocation = SuperMethodInvocation.all.first();
var continueStatement = ContinueStatement.all.first();
var constructorInvocation = ConstructorInvocation.all.first();
var arrayInitializer = ArrayInitializer.all.first();
var doStatement = DoStatement.all.first();
var typeParameter = TypeParameter.all.first();
var javadoc = Javadoc.all.first();
var iJavaModel = IJavaModel.all.first();
var whileStatement = WhileStatement.all.first();
var iJavaProject = IJavaProject.all.first();
var synchronizedStatement = SynchronizedStatement.all.first();
var typeDeclarationStatement = TypeDeclarationStatement.all.first();