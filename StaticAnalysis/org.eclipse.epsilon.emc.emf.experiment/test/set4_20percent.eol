model Core driver EMF {nsuri = "org.amma.dsl.jdt.core"};
model DOM driver EMF {nsuri = "org.amma.dsl.jdt.dom"};
model PrimitiveTypes driver EMF {nsuri = "org.amma.dsl.jdt.primitiveTypes"};

var superMethodInvocation = SuperMethodInvocation.all.first;
var prefixExpression = PrefixExpression.all.first;
var parenthesizedExpression = ParenthesizedExpression.all.first;
var tryStatement = TryStatement.all.first;
var textElement = TextElement.all.first;
var block = Block.all.first;
var postfixExpression = PostfixExpression.all.first;
var expressionStatement = ExpressionStatement.all.first;
var markerAnnotation = MarkerAnnotation.all.first;
var javadoc = Javadoc.all.first;
var enumConstantDeclaration = EnumConstantDeclaration.all.first;
var enumDeclaration = EnumDeclaration.all.first;
var assignment = Assignment.all.first;
var castExpression = CastExpression.all.first;
var typeDeclarationStatement = TypeDeclarationStatement.all.first;
var breakStatement = BreakStatement.all.first;
var fieldDeclaration = FieldDeclaration.all.first;
var infixExpression = InfixExpression.all.first;
var switchCase = SwitchCase.all.first;
var typeLiteral = TypeLiteral.all.first;
var packageDeclaration = PackageDeclaration.all.first;
var iImportDeclaration = IImportDeclaration.all.first;
var nullLiteral = NullLiteral.all.first;
var initializer = Initializer.all.first;
var iType = IType.all.first;
var parameterizedType = ParameterizedType.all.first;
var memberRef = MemberRef.all.first;
var variableDeclarationExpression = VariableDeclarationExpression.all.first;
var forStatement = ForStatement.all.first;
var iMethod = IMethod.all.first;
var binaryPackageFragmentRoot = BinaryPackageFragmentRoot.all.first;
var thisExpression = ThisExpression.all.first;
var superConstructorInvocation = SuperConstructorInvocation.all.first;
var emptyStatement = EmptyStatement.all.first;
var classInstanceCreation = ClassInstanceCreation.all.first;
var whileStatement = WhileStatement.all.first;
var iPackageFragment = IPackageFragment.all.first;
var conditionalExpression = ConditionalExpression.all.first;
var arrayInitializer = ArrayInitializer.all.first;
var enhancedForStatement = EnhancedForStatement.all.first;
var anonymousClassDeclaration = AnonymousClassDeclaration.all.first;
var sourcePackageFragmentRoot = SourcePackageFragmentRoot.all.first;
var assertStatement = AssertStatement.all.first;
var doStatement = DoStatement.all.first;
var iJavaModel = IJavaModel.all.first;
var typeParameter = TypeParameter.all.first;
var synchronizedStatement = SynchronizedStatement.all.first;
var singleMemberAnnotation = SingleMemberAnnotation.all.first;
var iJavaProject = IJavaProject.all.first;
var labeledStatement = LabeledStatement.all.first;
var iInitializer = IInitializer.all.first;