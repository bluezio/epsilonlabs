@namespace(uri="http://dom/1.0", prefix="dom")
package dom;

abstract class DomElement {
  ref DomElement container;
  attr int line;
  attr int column;
}

class Program extends DomElement {
  val Import[*] imports;
  val Statement[*] statements;
  val OperationDefinition[*] operations;
  attr String name;
}

class Import extends DomElement {
  attr String imported;
}

abstract class Statement extends DomElement {
}

abstract class Expression extends DomElement {
  val Type type;
}

class Block extends DomElement {
  val Statement[*] statements;
}

abstract class OperatorExpression extends Expression {
}

abstract class BinaryOperatorExpression extends OperatorExpression {
  val Expression lhs;
  val Expression rhs;
}

class AndOperatorExpression extends BinaryOperatorExpression {
}

abstract class LiteralExpression extends Expression {
}

class BooleanExpression extends PrimitiveExpression {
  attr boolean ~val;
}

class DivideOperatorExpression extends BinaryOperatorExpression {
}

class EnumerationLiteralExpression extends Expression {
  attr String model;
  attr String enumeration;
  attr String literal;
}

class EqualsOperatorExpression extends BinaryOperatorExpression {
}

abstract class FeatureCallExpression extends Expression {
  ref Expression target;
  attr boolean arrow;
}

class GreaterThanOperatorExpression extends BinaryOperatorExpression {
}

class GreaterThanOrEqualToOperatorExpression extends BinaryOperatorExpression {
}

class ImpliesOperatorExpression extends BinaryOperatorExpression {
}

class IntegerExpression extends PrimitiveExpression {
  attr int ~val;
}

class LessThanOperatorExpression extends BinaryOperatorExpression {
}

class LessThanOrEqualToOperatorExpression extends BinaryOperatorExpression {
}

class MethodCallExpression extends FeatureCallExpression {
  val Expression[*] arguments;
  attr String method;
}

class MinusOperatorExpression extends BinaryOperatorExpression {
}

class MultiplyOperatorExpression extends BinaryOperatorExpression {
}

class NameExpression extends Expression {
  attr String name;
}

abstract class UnaryOperatorExpression extends OperatorExpression {
  val Expression expr;
}

class NegativeOperatorExpression extends UnaryOperatorExpression {
}

class NotEqualsOperatorExpression extends BinaryOperatorExpression {
}

class NotOperatorExpression extends UnaryOperatorExpression {
}

class OrOperatorExpression extends BinaryOperatorExpression {
}

class PlusOperatorExpression extends BinaryOperatorExpression {
}

class PropertyCallExpression extends FeatureCallExpression {
  attr String property;
  attr boolean extended;
}

class RealExpression extends PrimitiveExpression {
  attr double ~val;
}

class StringExpression extends PrimitiveExpression {
  attr String ~val;
}

class VariableDeclarationExpression extends Expression {
  attr String name;
  attr boolean create;
}

class XorOperatorExpression extends BinaryOperatorExpression {
}

class OperationDefinition extends DomElement {
  attr String name;
  attr String contextType;
  attr String returnType;
  val VariableDeclarationExpression[*] parameters;
  val Statement[*] statements;
}

class AssignmentStatement extends Statement {
  val Expression lhs;
  val Expression rhs;
}

class BreakStatement extends Statement {
}

class BreakAllStatement extends Statement {
}

class ContinueStatement extends Statement {
}

class DeleteStatement extends Statement {
  val Expression deleted;
}

class ForStatement extends Statement {
  val VariableDeclarationExpression iterator;
  val Expression iterated;
  val Statement[*] body;
}

class IfStatement extends Statement {
  val Expression condition;
  val Statement[*] ifBody;
  val Statement[*] elseBody;
}

class ReturnStatement extends Statement {
  val Expression returned;
}

class SwitchStatement extends Statement {
  val Expression expression;
  val SwitchCaseStatement[*] cases;
}

abstract class SwitchCaseStatement extends Statement {
  val Statement[*] body;
}

class WhileStatement extends Statement {
  val Expression condition;
  val Statement[*] body;
}

class ModelDeclarationExpression extends Expression {
  attr String name;
  attr String alias;
  attr String driver;
  ref Statement[*] parameters;
}

class FLOMethodCallExpression extends FeatureCallExpression {
  attr String method;
  val VariableDeclarationExpression iterator;
  val Expression condition;
}

class ExpressionStatement extends Statement {
  val Expression expression;
}

class SwitchCaseDefaultStatement extends SwitchCaseStatement {
}

class SwitchCaseExpressionStatement extends SwitchCaseStatement {
  val Expression expression;
}

abstract class PrimitiveExpression extends LiteralExpression {
}

class AnyExpression extends LiteralExpression {
}

abstract class CollectionExpression extends LiteralExpression {
  val Expression[*] values;
}

class SetExpression extends CollectionExpression {
}

class BagExpression extends CollectionExpression {
}

class SequenceExpression extends CollectionExpression {
}

class OrderedSetExpression extends CollectionExpression {
}

class MapExpression extends LiteralExpression {
}

class NativeExpression extends LiteralExpression {
}

abstract class Type extends DomElement {
}

class AnyType extends Type {
}

class ModelElementType {
}

abstract class CollectionType extends Type {
}

abstract class PrimitiveType extends Type {
}

class BooleanType extends PrimitiveType {
}

class IntegerType extends PrimitiveType {
}

class RealType extends PrimitiveType {
}

class StringType extends PrimitiveType {
}

class SetType extends CollectionType {
}

class BagType extends CollectionType {
}

class SequenceType extends CollectionType {
}

class OrderedSetType extends CollectionType {
}

class MapType extends Type {
}

