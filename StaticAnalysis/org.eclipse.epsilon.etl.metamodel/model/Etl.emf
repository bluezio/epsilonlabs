@emf.gen(classPackageSuffix="metamodel.impl", utilityPackageSuffix="metamodel.util", metaDataPackageSuffix="metamodel", interfacePackageSuffix="metamodel", basePackage="org.eclipse.epsilon")
@emf.gen.usedGenPackage(name="eol", genModel="platform:/resource/org.eclipse.epsilon.eol.metamodel/model/Eol.genmodel")
@emf.gen.annotation(source="emf.gen", key="extends", value="eol")
@namespace(uri="http://www.eclipse.org/epsilon/etl", prefix="etl")
package etl;

import "platform:/resource/org.eclipse.epsilon.eol.metamodel/model/Eol.ecore";

class EtlElement extends eol.EolElement {
}

abstract class NamedBlock extends EtlElement {
  val eol.NameExpression[1] name;
  val eol.Block body;
}

class PreBlock extends NamedBlock {
}

class PostBlock extends NamedBlock {
}

class Guard extends EtlElement {
  val eol.EolElement[1] condition;
}

class EtlProgram extends EtlElement {
  val eol.Import[*] imports;
  val eol.OperationDefinition[*] operations;
  val eol.NameExpression[1] name;
  val eol.ModelDeclarationStatement[*] modelDeclarations;
  val TransformationRule[*] transformationRules;
  val PreBlock[*] preBlocks;
  val PostBlock[*] postBlocks;
}

class TransformationRule extends EtlElement {
  val eol.NameExpression[1] name;
  val eol.FormalParameterExpression[1] source;
  val eol.FormalParameterExpression[*] targets;
  val eol.Block body;
  val eol.AnnotationBlock annotationBlock;
  val eol.NameExpression[*] ~extends;
  ref TransformationRule[*] resolvedParentRules;
  val Guard guard;
}

