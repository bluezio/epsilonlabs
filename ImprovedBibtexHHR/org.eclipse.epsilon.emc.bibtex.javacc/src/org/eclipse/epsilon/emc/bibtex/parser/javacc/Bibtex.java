/* Generated By:JJTree&JavaCC: Do not edit this line. Bibtex.java */
package org.eclipse.epsilon.emc.bibtex.parser.javacc;

import java.io.FileInputStream;
import java.io.FileNotFoundException;

import org.eclipse.epsilon.emc.bibtex.Content;
import org.eclipse.epsilon.emc.bibtex.Entry;
import org.eclipse.epsilon.emc.bibtex.impl.*;

public class Bibtex/*@bgen(jjtree)*/implements BibtexTreeConstants, BibtexConstants {/*@bgen(jjtree)*/
  protected JJTBibtexState jjtree = new JJTBibtexState();

  public static void main(String args []) throws ParseException
  {
    Bibtex parser = null;
    try {
        parser = new Bibtex(new FileInputStream(args[0]));
    } catch (FileNotFoundException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    } finally {
        if (parser != null) {
            try {
                BibtexBibliography root = parser.bibliography();
            } catch (Exception e) {
                System.out.println("NOK.");
                System.out.println(e.getMessage());
            } catch (Error e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
            } finally {
                System.out.println("OK.");
            }

        }
    }
  }

/***************************
* SECTION 4 - THE GRAMMAR *
***************************/
  final public BibtexBibliography bibliography() throws ParseException {
 /*@bgen(jjtree) Bibliography */
  BibtexBibliography jjtn000 = (BibtexBibliography)BibtexNodeFactory.jjtCreate(JJTBIBLIOGRAPHY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Entry e;
  Content c;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT_START:
        case PREAMBLE_START:
        case STRING_START:
        case ID:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMENT_START:
          c = comment();
          jjtn000.getContents().add(c);
          break;
        case PREAMBLE_START:
          c = preamble();
          jjtn000.getContents().add(c);
          break;
        case STRING_START:
          e = stringEntry();
          jjtn000.getEntries().add(e);
          break;
        case ID:
          e = publicationEntry();
          jjtn000.getEntries().add(e);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Content comment() throws ParseException {
 /*@bgen(jjtree) Comment */
  BibtexComment jjtn000 = (BibtexComment)BibtexNodeFactory.jjtCreate(JJTCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(COMMENT_START);
      t = jj_consume_token(COMMENT_ENTRY);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setContent(t.image);
    {if (true) return jjtn000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Content preamble() throws ParseException {
 /*@bgen(jjtree) Preamble */
  BibtexPreamble jjtn000 = (BibtexPreamble)BibtexNodeFactory.jjtCreate(JJTPREAMBLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String c;
    try {
      jj_consume_token(PREAMBLE_START);
      jj_consume_token(OPEN_ENTRY);
      c = content();
      jj_consume_token(CLOSE_ENTRY);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setContent(c);
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Entry stringEntry() throws ParseException {
 /*@bgen(jjtree) StringEntry */
  BibtexStringEntry jjtn000 = (BibtexStringEntry)BibtexNodeFactory.jjtCreate(JJTSTRINGENTRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);BibtexTag tag;
    try {
      jj_consume_token(STRING_START);
      jj_consume_token(OPEN_ENTRY);
      tag = tag();
      jjtn000.getTags().add(tag);
      jj_consume_token(CLOSE_ENTRY);
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Entry publicationEntry() throws ParseException {
 /*@bgen(jjtree) PublicationEntry */
  BibtexPublicationEntry jjtn000 = (BibtexPublicationEntry)BibtexNodeFactory.jjtCreate(JJTPUBLICATIONENTRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String type;
  String key;
  BibtexTag tag;
    try {
      type = Id();
      jj_consume_token(OPEN_ENTRY);
      key = Id();
      jj_consume_token(SEPARATOR);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        tag = tag();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEPARATOR:
          jj_consume_token(SEPARATOR);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
      jjtn000.getTags().add(tag);
      }
      jj_consume_token(CLOSE_ENTRY);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setCitationKey(key);
    jjtn000.setType(type);
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public BibtexTag tag() throws ParseException {
 /*@bgen(jjtree) Tag */
  BibtexTag jjtn000 = (BibtexTag)BibtexNodeFactory.jjtCreate(JJTTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String name;
  String content;
    try {
      name = Id();
      jj_consume_token(EQUALS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case START_B_CONTENT:
      case START_Q_CONTENT:
      case ID:
        content = content();
        break;
      case NUMBER:
        content = numericalContent();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    jjtn000.setName(name);
    jjtn000.setValue(content);
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public String Id() throws ParseException {
  Token t;
    t = jj_consume_token(ID);
     {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String content() throws ParseException {
  String c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case START_B_CONTENT:
      c = bracedContent();
      break;
    case START_Q_CONTENT:
    case ID:
      c = concatContent();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public String numericalContent() throws ParseException {
  Token value;
    value = jj_consume_token(NUMBER);
    {if (true) return value.image;}
    throw new Error("Missing return statement in function");
  }

  final public String bracedContent() throws ParseException {
  Token start;
  String t;
  Token close;
    start = jj_consume_token(START_B_CONTENT);
    t = contentText();
    close = jj_consume_token(CLOSE_B_CONTENT);
      {if (true) return start.image + t + close.image;}
    throw new Error("Missing return statement in function");
  }

  final public String quotedContent() throws ParseException {
  Token start;
  String t;
  Token close;
    start = jj_consume_token(START_Q_CONTENT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case START_B_CONTENT:
      t = bracedContent();
      break;
    default:
      jj_la1[6] = jj_gen;
      t = contentText();
    }
    close = jj_consume_token(CLOSE_Q_CONTENT);
      {if (true) return start.image + t + close.image;}
    throw new Error("Missing return statement in function");
  }

  final public String concatContent() throws ParseException {
  String t;
  String part;
    t = concatPart();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(25);
      part = concatPart();
      t += part;
    }
      {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String concatPart() throws ParseException {
  String p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case START_Q_CONTENT:
      p = quotedContent();
      break;
    case ID:
      p = Id();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public String contentText() throws ParseException {
    Token t;
    String text = "";
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTENT_TEXT:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      t = jj_consume_token(CONTENT_TEXT);
      text +=t.image;
    }
     {if (true) return text;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public BibtexTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2001c0,0x2001c0,0x200000,0x400000,0x1244000,0x244000,0x4000,0x2000000,0x240000,0x100000,};
   }

  /** Constructor with InputStream. */
  public Bibtex(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Bibtex(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BibtexTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Bibtex(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BibtexTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Bibtex(BibtexTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BibtexTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
