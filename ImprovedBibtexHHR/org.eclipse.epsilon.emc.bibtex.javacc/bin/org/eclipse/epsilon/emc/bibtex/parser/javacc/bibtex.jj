/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. bibtex.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */

/*******************************
***** SECTION 1 - OPTIONS *****
*******************************/options{  JDK_VERSION = "1.5";  STATIC = false;
  IGNORE_CASE = true;
                            
               
                                     
                         }
/*********************************
***** SECTION 2 - USER CODE *****
*********************************/PARSER_BEGIN(Bibtex)package org.eclipse.epsilon.emc.bibtex.parser.javacc;

import java.io.FileInputStream;
import java.io.FileNotFoundException;

import org.eclipse.epsilon.emc.bibtex.Content;
import org.eclipse.epsilon.emc.bibtex.Entry;
import org.eclipse.epsilon.emc.bibtex.impl.*;

public class Bibtex/*@bgen(jjtree)*/implements BibtexTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTBibtexState jjtree = new JJTBibtexState();

/*@egen*/
  
  public static void main(String args []) throws ParseException  {    Bibtex parser = null;
    try {
        parser = new Bibtex(new FileInputStream(args[0]));
    } catch (FileNotFoundException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    } finally {
        if (parser != null) {
            try {
                BibtexBibliography root = parser.bibliography();
            } catch (Exception e) {
                System.out.println("NOK.");
                System.out.println(e.getMessage());
            } catch (Error e) {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
            } finally {                System.out.println("OK.");
            }
              
        }
    }  }}PARSER_END(Bibtex)
/*****************************************
***** SECTION 3 - TOKEN DEFINITIONS *****
*****************************************/

TOKEN_MGR_DECLS : {
    int contentBraceDepth;
}
<DEFAULT, IN_ENTRY, IN_ENTRY_TYPE> SKIP :{  " "| "\r"| "\t"| "\n"}

/* ENTRY */

<DEFAULT> SPECIAL_TOKEN :
{
  < COMMENT : (~["@"])*"@" > : IN_ENTRY_TYPE
}

/* COMMENT ENTRY */
<IN_ENTRY_TYPE> TOKEN :
{
    < COMMENT_START : "comment" > : IN_COMMENT_ENTRY
}

/* PREAMBLE ENTRY */
<IN_ENTRY_TYPE> TOKEN :
{
    < PREAMBLE_START : "preamble" > : IN_ENTRY_TYPE
}

/* STRING ENTRY */
<IN_ENTRY_TYPE> TOKEN :
{
    < STRING_START : "string" > : IN_ENTRY_TYPE
}


<IN_COMMENT_ENTRY> TOKEN : {
< COMMENT_ENTRY: "\n"|"\r"|"\r\n" > : DEFAULT }


<IN_COMMENT_ENTRY> MORE :
{
    < ~[] >
}

/* OTHER ENTRIES */
<IN_ENTRY_TYPE> TOKEN :
{
  < OPEN_ENTRY : "{" > : IN_ENTRY
}

<IN_ENTRY, IN_PREAMBLE> TOKEN :
{
  < CLOSE_ENTRY : "}" > : DEFAULT
}

<IN_ENTRY_TYPE> MORE :
{
 < ~[] > 
}

/* TAG */

/* Content */

/* Braced Content */<IN_ENTRY> TOKEN :{  < START_B_CONTENT : "{" > { contentBraceDepth = 1 ; } : IN_BRACED_CONTENT}

<IN_BRACED_CONTENT> TOKEN :
{
  < CLOSE_B_CONTENT : "}" > {
    contentBraceDepth -= 1;
    SwitchTo( contentBraceDepth==0 ? IN_ENTRY : IN_BRACED_CONTENT ) ; }
}

<IN_BRACED_CONTENT> MORE :
{
  "{" { contentBraceDepth += 1 ; } : IN_BRACED_NESTED_CONTENT
}

<IN_BRACED_NESTED_CONTENT> MORE :
{
  "}" {
    contentBraceDepth -= 1;
    SwitchTo( contentBraceDepth==1 ? IN_BRACED_CONTENT : IN_BRACED_NESTED_CONTENT ) ; }
}


/* Quoted Content */
<IN_ENTRY> TOKEN :
{
  < START_Q_CONTENT : "\"" > : IN_QUOTED_CONTENT
}

<IN_QUOTED_CONTENT> TOKEN :
{
  < CLOSE_Q_CONTENT : "\"" > : IN_ENTRY 
}

/*
<IN_QUOTED_CONTENT> MORE :
{
  "{" { contentBraceDepth += 1 ; } : IN_QUOTED_CONTENT_IN_BRACED_CONTENT

}
*/
<IN_BRACED_CONTENT, IN_BRACED_NESTED_CONTENT, IN_QUOTED_CONTENT> TOKEN :
{
 < CONTENT_TEXT : ~[] > 
}

<IN_ENTRY, IN_ENTRY_TYPE> TOKEN : { <ID : (["a"-"z"]|"_") (["a"-"z"]|"_"|"-"|["0"-"9"]|".")* > }
<IN_ENTRY> TOKEN : { < SEPARATOR : ","> }

<IN_ENTRY> TOKEN : { < EQUALS : "="> }

<IN_ENTRY> TOKEN : { < NUMBER : (["0"-"9"])+ > }


/***************************
* SECTION 4 - THE GRAMMAR *
***************************/

BibtexBibliography bibliography()              :
{/*@bgen(jjtree) Bibliography */
  BibtexBibliography jjtn000 = (BibtexBibliography)BibtexNodeFactory.jjtCreate(JJTBIBLIOGRAPHY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Entry e;
  Content c;}
{/*@bgen(jjtree) Bibliography */
    try {
/*@egen*/    (c =comment() {
          jjtn000.getContents().add(c);}
     | c = preamble() {
          jjtn000.getContents().add(c);}     | e = stringEntry(){
          jjtn000.getEntries().add(e);}
     | e =publicationEntry(){
          jjtn000.getEntries().add(e);}
     )*
    <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}

Content comment()         :
{/*@bgen(jjtree) Comment */
  BibtexComment jjtn000 = (BibtexComment)BibtexNodeFactory.jjtCreate(JJTCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;}{/*@bgen(jjtree) Comment */
  try {
/*@egen*/
  <COMMENT_START> t = <COMMENT_ENTRY>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setContent(t.image);    return jjtn000;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

Content preamble()          :
{/*@bgen(jjtree) Preamble */
  BibtexPreamble jjtn000 = (BibtexPreamble)BibtexNodeFactory.jjtCreate(JJTPREAMBLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String c;}
{/*@bgen(jjtree) Preamble */
  try {
/*@egen*/
  <PREAMBLE_START> <OPEN_ENTRY> c = content() <CLOSE_ENTRY>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setContent(c);
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

Entry stringEntry()             :
{/*@bgen(jjtree) StringEntry */
  BibtexStringEntry jjtn000 = (BibtexStringEntry)BibtexNodeFactory.jjtCreate(JJTSTRINGENTRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  BibtexTag tag;
}{/*@bgen(jjtree) StringEntry */
  try {
/*@egen*/ 
  <STRING_START> <OPEN_ENTRY> tag=tag()
  {
      jjtn000.getTags().add(tag);} <CLOSE_ENTRY>/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
      }
/*@egen*/
      {
        return jjtn000;      }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

Entry publicationEntry()                  :
{/*@bgen(jjtree) PublicationEntry */
  BibtexPublicationEntry jjtn000 = (BibtexPublicationEntry)BibtexNodeFactory.jjtCreate(JJTPUBLICATIONENTRY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String type;
  String key;
  BibtexTag tag;}{/*@bgen(jjtree) PublicationEntry */
  try {
/*@egen*/
  type=Id() <OPEN_ENTRY>
    key=Id() <SEPARATOR> (tag=tag()(<SEPARATOR>)?    {      jjtn000.getTags().add(tag);    }    )*
  <CLOSE_ENTRY>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {    jjtn000.setCitationKey(key);
    jjtn000.setType(type);
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

BibtexTag tag()     :
{/*@bgen(jjtree) Tag */
  BibtexTag jjtn000 = (BibtexTag)BibtexNodeFactory.jjtCreate(JJTTAG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String name;
  String content;}
{/*@bgen(jjtree) Tag */
   try {
/*@egen*/   name = Id() <EQUALS> (content = content() | content = numericalContent())/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
    jjtn000.setName(name);
    jjtn000.setValue(content);
    return jjtn000;
  }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

String Id()      :
{
  Token t;
  }
{
   (     t=<ID>)
   {
     return t.image;
   }     
}

String content()       :
{
  String c;
}
{
  (c = bracedContent() | c = concatContent())
  {
    return c;
  }}

String numericalContent()      :
{
  Token value;
  }
{
  value = <NUMBER>
  {    return value.image;  }  
}

String bracedContent()      :
{
  Token start;
  String t;
  Token close;}
{    start = <START_B_CONTENT> t = contentText() close = <CLOSE_B_CONTENT>    {      return start.image + t + close.image;
    } 
}

String quotedContent()      :
{
  Token start;
  String t;
  Token close;}
{
    start = <START_Q_CONTENT> ( t=bracedContent() | t=contentText() ) close = <CLOSE_Q_CONTENT>
    {
      return start.image + t + close.image;
    }
}

String concatContent()      :
{
  String t;
  String part;}
{
    (t = concatPart()) ("#" part=concatPart()    {      t += part;    }    )*
    {      return t;    }}

String concatPart()      :
{
  String p;}{
  (    p = quotedContent() | p = Id())
  {    return p;  }}

String contentText()      :
{
    Token t;
    String text = "";
}
{
   (t=<CONTENT_TEXT>
   {
      text +=t.image;})*        
    {return text;}   }

