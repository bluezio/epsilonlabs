/* There must be only a single default target in the project */

context Project {

    constraint defaultTarget {
    
    	check : self.defaultTarget.isDefined()
    	
    	message : "A default target must be defined"
    	
    }
	
	/*
	constraint singleDefaultTask {
	
		guard : self.satisfies('atleastOneTask')
		
		check {
			var defaultCount : Integer;			
			for(t in Task.all()) {
				if(t.isDefault = true)
					defaultCount = defaultCount + 1;
			}
			return defaultCount = 1;
		}
		
		message { 
			var msg : String;
			if(defaultCount = 0) {
				 msg = "Select one of the tasks as the default task to execute";
			} else {
				 msg = "Only a single task must be specified as the default task";
			}	
			return msg;	
		}
	} */
}

/* A target cannot depend on itself */

context Target {

       constraint noSelfDepends {
       
       		guard : self.containingProject.satisfies('defaultTarget')
			
			check : self.depends.excludes(self)
            
            message : self.name + " cannot depend on itself"
            
       }
       
       //Check for all tasks in a target.
       //Only a single task can not be following any other task - i.e. the start task.
       constraint singleStartTask {
       
       		guard : self.satisfies('noSelfDepends')
			
			check  {
				var notFollowingTasks : Sequence;		
				
				for(t in self.targetTasks) {
					if(not t.follows.isDefined()) {
						notFollowingTasks.add(t);
					}
				}
				return notFollowingTasks.size() = 1;
			} 
            
            message {
            	var msg : String = "The tasks: ";
            	var taskLabel : String = "";
            	for(t in notFollowingTasks) {
            		if(t.isKindOf(ExecutableModelTask)) {
						taskLabel = '"' + t.src + '"';            		
            		} else {
            			taskLabel = '"' + t.name + '"';
            		}
            		msg = msg + taskLabel;
            		if(hasMore) msg = msg + ", ";
            	}
            	
            	msg = msg + " are specified as not following other tasks. Specify atleast one of them as a follower of another task."; 
            	
            	return msg;
            }
            
       }
}

/* A task cannot follow itself */

context Task {

       constraint noSelfFollows {
       
       		//guard : self.containingTarget.satisfies('noSelfDepends')
			
			check : not (self.follows = self)
            
            //Is there a way to get the gmf.label rather than the name ?
            message : self.name + " cannot follow itself"
            
       }
       
}





